// @import "_colors2.scss";
// @import "_colors.scss";
@use "_colors" as color;
@use "_colors2" as color2;

body {
  margin: 0;
  color: color.$color3;
  background-color: color2.$color4;
  h1 {
    font-size: 2rem;
  }

  a {
    text-decoration: double;
  }
}
.productcard {
  max-width: min-content;
  padding: 1rem;

  a {
    color: color.$color1;
  }

  > h2 {
    color: pink;
  }
}

@mixin customFun($color) {
  background-color: aqua;
  padding: 10px;
  border: rebeccapurple;
  cursor: pointer;
}
.p1 {
  @include customFun(color.$color1);
}

.p2 {
  @include customFun(color2.$color2);
}

.p3 {
  @include customFun(color.$color3);
}

.string {
  content: quote("Hello");
}

.string {
  content: str-index("Hello world!", "H");
}

.string {
  content: str-insert("Hello world!", " wonderful", 6);
}
.string {
  content: str-length("Hello world!");
}
.string {
  content: str-slice("Hello world!", 2, 5);
}
.string {
  content: to-lower-case("Hello World!");
}
.string {
  content: unique-id();
}
.string {
  content: unquote("Hello world!");
}

.Numeric {
  content: abs(-15);
}

.Numeric {
  content: ceil(15.2);
}
.Numeric {
  content: acomparable(15px, 10px);
}
.Numeric {
  content: comparable(35px, 2em);
}

.Numeric {
  content: floor(15.8);
}
.Numeric {
  content: max(5, 7, 9, 0, -3, -7);
}
.Numeric {
  content: min(5, 7, 9, 0, -3, -7);
}

.Numeric {
  content: percentage(1.2);
}
.Numeric {
  content: random();
}
.Numeric {
  content: random(6);
}

.Numeric {
  content: round(15.2);
}

.List {
  content: append((a b c), d);
}

.List {
  content: index(a b c, b);
}

.List {
  content: is-bracketed([a b c]);
}
.List {
  content: is-bracketed(a b c);
}

.List {
  content: join(a b c, d e f);
}
.List {
  content: join(a b c, d e f, $bracketed: true);
}

.List {
  content: length(a b c);
}
.List {
  content: list-separator(a b c);
}

.List {
  content: nth(a b c, 3);
}
.List {
  content: set-nth(a b c, 2, x);
}

.List {
  content: zip(1px 2px 3px, solid dashed dotted, red green blue);
}
.Map {
  content: map-get(color.$font-sizes, "small");
}

.Map {
  content: map-has-key(color.$font-sizes, "big");
}

.Map {
  content: map-keys(color.$font-sizes);
}

$merged-font-sizes: map-merge(color.$font-sizes, color.$font-sizes2);

@each $size, $value in $merged-font-sizes {
  .font-#{$size} {
    font-size: $value;
  }
}
$modified-font-sizes: map-remove(color.$font-sizes, "small");

.Map {
  content: map-values(color.$font-sizes);
}
$selector: is-superselector("div", "h2");

@if $selector {
  div {
    width: 30px;
  }
}

$selector: selector-append("div", ".myInput");
#{$selector} {
  width: 20px;
}

$selector: selector-nest("ul", "li");
#{$selector} {
  width: 20px;
}
$selector: selector-parse("h1 .myInput .warning");
#{$selector} {
  width: 20px;
}
$selector: selector-replace("p.warning", "p", "div");
#{$selector} {
  width: 20px;
}
$selector: selector-unify(".myInput", ".disabled");

@if $selector {
  #{$selector} {
    width: 20px;
  }
}
$selector: simple-selectors("div.myInput");

@if $selector {
  #{$selector} {
    width: 20px;
  }
}

$num: 10px;
$char: "Arial";
$list: 10px 20px 30px;
$map: (
  "regular": 400,
  "medium": 500,
);
$basecolor: pink;

@mixin border-radius {
  border-radius: 5px;
}

@function add($a, $b) {
  @return $a + $b;
}

.test {
  padding: variable-exists(num);
  padding: variable-exists(list);
  padding: variable-exists(listing);

  padding: global-variable-exists(num);
  padding: global-variable-exists(char);

  padding: mixin-exists(char);
  padding: mixin-exists(border-radius);

  padding: function-exists(border-radius);
  padding: function-exists(add);

  padding: type-of($char);

  // padding: inspect($num);
  // padding: unit($num);
  // padding: unitless($num);
  // padding: variable-exists($num);
}

$base-color: #ff8800;

#first,
#second {
  width: 400px;
  height: 100px;
  margin-bottom: 20px;
  border: 1px solid #000;
}

#first {
  background: $base-color;
}

#second {
  background: darken($base-color, 70);

  // background: lighten($base-color, 60);

  // background: adjust-hue($base-color, 80);

  // background: saturate($base-color, 90);

  // background: desaturate($base-color, 30);
  // background: desaturate($base-color, 0);
  // background: desaturate($base-color, 100);

  // background: mix($base-color, red, 50);
  // background: mix($base-color, yellow, 50);

  // background: transparentize($base-color, 0.1);

  // background: red($base-color);

  // background: green($base-color);

  // background: blue($base-color);

  // background: hue($base-color);

  // background: saturation($base-color);

  // background: lightness($base-color);

  // background: alpha($base-color);
}
