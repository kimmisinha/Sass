// @import "_colors2.scss";
// @import "_colors.scss";
@use "_colors" as color;
@use "_colors2" as color2;

body {
  margin: 0;
  color: color.$color3;
  background-color: color2.$color4;
  h1 {
    font-size: 2rem;
  }

  a {
    text-decoration: double;
  }
}
.productcard {
  max-width: min-content;
  background-color: color.$color2;
  padding: 1rem;

  a {
    color: color.$color1;
  }

  > h2 {
    color: pink;
  }
}

@mixin customFun($color) {
  background-color: aqua;
  padding: 10px;
  border: rebeccapurple;
  cursor: pointer;
}
.p1 {
  @include customFun(color.$color1);
}

.p2 {
  @include customFun(color2.$color2);
}

.p3 {
  @include customFun(color.$color3);
}

.string {
  content: quote("Hello");
}

.string {
  content: str-index("Hello world!", "H");
}

.string {
  content: str-insert("Hello world!", " wonderful", 6);
}
.string {
  content: str-length("Hello world!");
}
.string {
  content: str-slice("Hello world!", 2, 5);
}
.string {
  content: to-lower-case("Hello World!");
}
.string {
  content: unique-id();
}
.string {
  content: unquote("Hello world!");
}

.Numeric {
  content: abs(-15);
}

.Numeric {
  content: ceil(15.2);
}
.Numeric {
  content: acomparable(15px, 10px);
}
.Numeric {
  content: comparable(35px, 2em);
}

.Numeric {
  content: floor(15.8);
}
.Numeric {
  content: max(5, 7, 9, 0, -3, -7);
}
.Numeric {
  content: min(5, 7, 9, 0, -3, -7);
}

.Numeric {
  content: percentage(1.2);
}
.Numeric {
  content: random();
}
.Numeric {
  content: random(6);
}

.Numeric {
  content: round(15.2);
}

.List {
  content: append((a b c), d);
}

.List {
  content: index(a b c, b);
}

.List {
  content: is-bracketed([a b c]);
}
.List {
  content: is-bracketed(a b c);
}

.List {
  content: join(a b c, d e f);
}
.List {
  content: join(a b c, d e f, $bracketed: true);
}

.List {
  content: length(a b c);
}
.List {
  content: list-separator(a b c);
}

.List {
  content: nth(a b c, 3);
}
.List {
  content: set-nth(a b c, 2, x);
}

.List {
  content: zip(1px 2px 3px, solid dashed dotted, red green blue);
}
.Map {
  content: map-get(color.$font-sizes, "small")
}

.Map {
  content: map-has-key(color.$font-sizes, "big")
}
  

.Map {
  content: map-keys(color.$font-sizes)
}

$merged-font-sizes: map-merge(color.$font-sizes, color.$font-sizes2);

@each $size, $value in $merged-font-sizes {
  .font-#{$size} {
    font-size: $value;
  }
}
$modified-font-sizes: map-remove(color.$font-sizes, "small");

.Map {
  content: map-values(color.$font-sizes)

}
  